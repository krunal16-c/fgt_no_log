on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  create_release:
    name: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Get Release Notes
        id: get_release_notes
        run: |
          cd docs
          bash generate_release_changes.sh
          value=`cat changes.txt`
          value="${value//'%'/'%25'}"
          value="${value//$'\n'/'%0A'}"
          value="${value//$'\r'/'%0D'}" 
          echo ::set-output name=changelog::"$value"
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           tag_name: ${{ github.ref }}
           release_name: Release ${{ github.ref }}
           body: "${{ steps.get_release_notes.outputs.changelog }}"
           draft: false
           prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for Publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  build_and_upload:
    needs: [create_release]
    name: Build and Upload
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Get Version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}       
      # BUILD
      # Build the mac binaries
      - name: Build project Mac
        if: matrix.os == 'macos-latest'
        run: |
          cd application_icons
          python make_icns.py
          cd ..
          pyinstaller -i application_icons/icon.icns --windowed --hidden-import='PIL._tkinter_finder' --onefile run.py -n friendly_gt
      # Build the windows binaries
      - name: Build project Windows
        if: matrix.os == 'windows-latest'
        run: |
          pip install tornado
          pip install pywin32
          if [ `echo ${{ github.ref }} | grep -c "d"` -eq 0 ]; then
            pyinstaller -i application_icons/icon.ico --windowed --hidden-import='PIL._tkinter_finder' run.py -n friendly_gt
            cd windows
            pyinstaller --windowed --hidden-import='PIL._tkinter_finder' --onefile windows_install.py -n friendly_gt-installer
            pyinstaller --windowed --hidden-import='PIL._tkinter_finder' --onefile windows_uninstall.py -n friendly_gt-uninstaller
          else
            pyinstaller -i application_icons/icon.ico --hidden-import='PIL._tkinter_finder' run.py -n friendly_gt
            cd windows
            pyinstaller --hidden-import='PIL._tkinter_finder' --onefile windows_install.py -n friendly_gt-installer
            pyinstaller --hidden-import='PIL._tkinter_finder' --onefile windows_uninstall.py -n friendly_gt-uninstaller
          fi
        shell: bash 
        
      # Build the project on ubuntu
      - name: Build project Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --windowed --hidden-import='PIL._tkinter_finder' --onefile run.py -n friendly_gt
      - name: Load Release URL File
        uses: actions/download-artifact@v1
        with:
          name: release_url
        
      - name: Get Rlease File Name and Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      # PACKAGE
      - name: Bundle Ubuntu App
        if: matrix.os == 'ubuntu-latest'
        run: |
           mv ./dist/friendly_gt ./ubuntu/friendly_gt_ubuntu-latest
           mv ./ubuntu ./friendly_gt_ubuntu
           cp ./docs/changelog.txt ./friendly_gt_ubuntu/changelog.txt
           cp ./README.md ./friendly_gt_ubuntu/README.md
           zip -r ./friendly_gt-ubuntu.zip ./friendly_gt_ubuntu
           
      - name: Package Windows Assets
        if: matrix.os == 'windows-latest'
        id: package-windows
        run: |
           #New-Item -path "." -name "windows_app" -ItemType "directory"
           #Copy-Item  "dist\friendly_gt.exe" -Destination "windows_app\friendly_gt.exe" #cp ./dist/friendly_gt.exe ./windows
           Copy-Item "windows\dist\friendly_gt-installer.exe" -Destination "dist\friendly_gt_installer.exe"
           Copy-Item "windows\dist\friendly_gt-uninstaller.exe" -Destination "dist\friendly_gt\friendly_gt_uninstaller.exe"
           Copy-Item "docs\changelog.txt" -Destination "dist\changelog.txt"
           Copy-Item "README.md" -Destination "dist\README.md"
           Compress-Archive -path ".\dist\*" -DestinationPath ".\friendly_gt-windows.zip"
        shell: powershell
        # Bundle and upload the macos app folder
      - name: Bundle Mac OS App
        if: matrix.os == 'macos-latest'
        run: |
          zip -r ./friendly_gt-macos-app.zip ./dist/friendly_gt.app
          
      # RELEASE
      - name: Upload Release Asset - Ubuntu
        if: matrix.os == 'ubuntu-latest'
        id: upload-release-asset-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./friendly_gt-ubuntu.zip
          asset_name: friendly_gt-ubuntu.zip
          asset_content_type: application/zip
        
      - name: Upload Release Asset - Mac
        if: matrix.os == 'macos-latest'
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }} 
          asset_path: ./dist/friendly_gt
          asset_name: friendly_gt_${{ matrix.os }}
          asset_content_type: application/octet-stream
      
      - name: Upload Release Asset - Windows
        if: matrix.os == 'windows-latest'
        id: upload-release-asset-win 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }} 
          asset_path: ./friendly_gt-windows.zip
          asset_name: friendly_gt-windows.zip
          asset_content_type: application/zip
      
      - name: Upload Mac Os App
        if: matrix.os == 'macos-latest'
        id: upload-release-asset-mac-app
        uses: actions/upload-release-asset@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:

          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./friendly_gt-macos-app.zip
          asset_name: friendly_gt_macos-app.zip
          asset_content_type: application/zip
